<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> <%@include file = "include/header.jsp" %>

<form action="join-process.jsp" method="post" class="join" name="joinForm">
  <!--  // methodë getê³¼ postê° sìëë° ë¹ë²ì´ ììë í¬ì¤í¸!!!! getì¼ë¡ íë©´ ì ë³´ê° ë¤ ì£¼ìì°½ì ë¸ -->
  <div class="container-sm">
    <div class="row justify-content-center mt-5">
      <!-- bootstrap의 grid는 12개로 나눠서 쓴다.. 12등분으로 쓰고.. 12로 나눠서 떨어지는 수를 쓰면 좋다.-->
      <div class="col-6">
        
        <div class="mb-3">
        <label for="floatingPassword">기존 비밀번호</label>
          <input type="password" name="userPw" class="form-control" id="floatingPassword" placeholder="비밀번호를 입력해주세요." />
          
        </div>
        <div class="mb-3">
        <label for="floatingPassword">새 비밀번호</label>
          <input type="password" name="newUserPw" class="form-control" id="floatingPassword" placeholder="새 비밀번호를 입력해주세요." />
          
        </div>
         <div class="mb-3">
        <label for="floatingPassword">Password 확인</label>
          <input type="password" name="newUserPw02" class="form-control" id="floatingPassword02" placeholder="비밀번호 확인" />
          
        </div>        

        <div class="text-center">
          <button type="submit" id="btnSubmit" class="btn btn-primary btn-lg">수정하기</button>
        </div>
      </div>
    </div>
  </div>
</form>
<script>


  const joinForm = document.forms.joinForm;
  // body 밑의 form을 모두 찾아라!
 console.log(joinForm);

  btnSubmit.addEventListener("click", (e) => {
    	console.log(joinForm.elements.userName.value);
   if (joinForm.elements.userPw.value.trim() === "") {
      e.preventDefault();
      alert("비번을 입력하세요.");
      joinForm.elements.userPw.value="";
      joinForm.elements.userPw.focus();
    } else if (joinForm.elements.userPw.value !== joinForm.elements.userPw02.value){
    	e.preventDefault();
        alert("비밀번호를 재확인하세요.");
        joinForm.elements.userPw02.value="";
        joinForm.elements.userPw02.focus();
    } 
    console.log(isDoubleCheck);
   
  });
  
  function searchZonecode() {
    new daum.Postcode({
      oncomplete: function (data) {
        // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.

        // 각 주소의 노출 규칙에 따라 주소를 조합한다.
        // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.
        let addr = ""; // 주소 변수
        let extraAddr = ""; // 참고항목 변수

        //사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.
        if (data.userSelectedType === "R") {
          // 사용자가 도로명 주소를 선택했을 경우
          addr = data.roadAddress;
        } else {
          // 사용자가 지번 주소를 선택했을 경우(J)
          addr = data.jibunAddress;
        }

        // 사용자가 선택한 주소가 도로명 타입일때 참고항목을 조합한다.
        if (data.userSelectedType === "R") {
          // 법정동명이 있을 경우 추가한다. (법정리는 제외)
          // 법정동의 경우 마지막 문자가 "동/로/가"로 끝난다.
          if (data.bname !== "" && /[동|로|가]$/g.test(data.bname)) {
            extraAddr += data.bname;
          }
          // 건물명이 있고, 공동주택일 경우 추가한다.
          if (data.buildingName !== "" && data.apartment === "Y") {
            extraAddr += extraAddr !== "" ? ", " + data.buildingName : data.buildingName;
          }
          // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.
          if (extraAddr !== "") {
            extraAddr = " (" + extraAddr + ")";
          }
          // 조합된 참고항목을 해당 필드에 넣는다.
          document.querySelector(".extraAddress").value = extraAddr;
        } else {
          document.querySelector(".extraAddress").value = "";
        }

        // 우편번호와 주소 정보를 해당 필드에 넣는다.
        document.querySelector("#zonecode").value = data.zonecode;
        document.querySelector(".address").value = addr;
        // 커서를 상세주소 필드로 이동한다.
        document.querySelector(".detailAddress").focus();
      },
    }).open();
  };
  
  
  
  const testEmail= "hi1237@nate.com";
  console.log(testEmail.match(regEmail));
  // match를 통해 이메일 형식이 맞는지 안맞는지 확인가능 XXXX@XXXX.XXX
</script>

<%@include file = "include/footer.jsp" %>








